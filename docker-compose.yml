version: "3"

services:
# UCI API
  uci_federation_service:
    build: 
      context: ./uci-apis/v2/uci
    image: federation-service
    restart: always
    env_file: .env

    ports:
      - 9999:9999
  
  uci_postgres_db:
    image: postgres:12
    env_file: .env
    restart: always
    environment:
      - POSTGRES_PASSWORD=${UCI_API_POSTGRES_PASSWORD}
      - POSTGRES_USER=${UCI_API_POSTGRES_USER}
      - POSTGRES_DB=${UCI_API_POSTGRES_DB}
    volumes:
      - pgdata-uci_postgres_db:/var/lib/postgresql/data

  uci_hasura:
    image: hasura/graphql-engine:v2.0.0-alpha.1
    restart: always
    env_file: .env
    ports:
      - "15003:8080"
    depends_on:
      - uci_postgres_db
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}

  uci_redis:
    image: redis:latest
    env_file: .env
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    volumes:
      - ./uci_redis:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

# UCI PWA Adapter
  uci_transport_socket:
    image: samagragovernance/:655da87
    restart: always
    environment:
      REDIS_HOST: uci_redis_cache
      REDIS_PORT: 6379
      SERVER_PORT: 3005
      ADAPTER_URL: "http://uci-core-inbound:8085/pwa/web"
    ports:
      - 3005:3005

  # TODO: Needs to be fixed for general purpose use
  uci_nginx:
    restart: always
    image: nginx
    volumes:
    - ./nginx.conf:/etc/nginx/nginx.conf
    - ./uci-web-channel.conf:/etc/nginx/sites-enabled/default
    - ./uci-web-channel/build:/usr/site
    # environment:
    #   REACT_APP_TRANSPORT_SOCKET_URL: "ws://localhost:3005"
    ports:
    - "9098:80"

  uci_admin:
    restart: always
    build: 
      context: uci-admin
      args:
        NG_APP_url: ${NG_APP_url}
        NG_APP_nl_url: ${NG_APP_nl_url}
        NG_APP_nl_login_url: ${NG_APP_nl_login_url}
        NG_APP_nl_login_token: ${NG_APP_nl_login_token}
        NG_APP_nl_application_id: ${NG_APP_nl_application_id}
        NG_APP_blobUrl: ${NG_APP_blobUrl}
        NG_APP_botPhoneNumber: ${NG_APP_botPhoneNumber}
        NG_APP_adapterId: ${NG_APP_adapterId}
        NG_APP_broadcastAdapterId: ${NG_APP_broadcastAdapterId}
        NG_APP_userId: ${NG_APP_userId}
        NG_APP_orgId: ${NG_APP_orgId}
        NG_APP_token: ${NG_APP_token}
    image: uci-admin
    ports:
    - "9097:80"


  uci_redis_cache:
    image: redis:latest
    restart: always
    command: ['redis-server', '--appendonly', 'yes']
    hostname: redis
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

# Kafka
  uci_zookeeper:
    image: wurstmeister/zookeeper
    restart: always
  
  uci_kafka:
    image: wurstmeister/kafka
    restart: always
    environment:
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://dev.uci.samagra.io:9094
      KAFKA_ZOOKEEPER_CONNECT: uci_zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_LOG_DIRS: ./data00/kafka-logs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./etc/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
      - ./data00/kafka:/kafka
      - ./kafka-data:/var/lib/kafka:Z
    links:
      - uci_zookeeper

  uci_schema_registry:
    image: confluentinc/cp-schema-registry
    restart: always
    depends_on:
      - uci_kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'uci_kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'uci_schema_registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  kafka-connect:
    image: confluentinc/cp-kafka-connect
    restart: always
    depends_on:
      - uci_kafka
      - uci_schema_registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'uci_kafka:9092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://uci_schema_registry:8085'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://uci_schema_registry:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'

# UCI Core
  uci-core-inbound:
    image: "samagragovernance/inbound:${CURRENT_VERSION}"
    restart: always
    env_file: .env
    ports:
      - "0.0.0.0:${INBOUND_EXTERNAL_PORT}:${INBOUND_INTERNAL_PORT}"

  uci-core-orchestrator:
    image: "samagragovernance/orchestrator:${CURRENT_VERSION}"
    restart: always
    env_file: .env
    ports:
      - "${ORCHESTRATOR_INTERNAL_PORT}:${ORCHESTRATOR_INTERNAL_PORT}"

  uci-core-transformer:
    image: "samagragovernance/transformer:${CURRENT_VERSION}"
    restart: always
    env_file: .env
    ports:
      - "${TRANSFORMER_INTERNAL_PORT}:${TRANSFORMER_INTERNAL_PORT}"

  uci-core-outbound:
    image: "samagragovernance/outbound:${CURRENT_VERSION}"
    restart: always
    env_file: .env
    ports:
      - "${OUTBOUND_INTERNAL_PORT}:${OUTBOUND_INTERNAL_PORT}"

  uci-core-broadcast-transformer:
    image: "samagragovernance/broadcast-transformer:${CURRENT_VERSION}"
    restart: always
    env_file: .env
    ports:
      - "${BROADCAST_TRANSFORMER_INTERNAL_PORT}:${BROADCAST_TRANSFORMER_INTERNAL_PORT}"

  uci-core-cdac:
    image: samagragovernance/cdac-service:4.10.3
    restart: always
    env_file: .env-cdac

  uci-core-cassandra:
    image: cassandra:latest
    restart: always
    environment:
      - MAX_HEAP_SIZE=1000M
      - HEAP_NEWSIZE=1000M
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
    volumes:
      - ./out/cd-new:/var/lib/cassandra
    healthcheck:
      test:
        [
          "CMD",
          "cqlsh",
          "-u cassandra",
          "-p cassandra",
          "-e describe keyspaces",
        ]
      interval: 15s
      timeout: 10s
      retries: 10

  uci-core-redis:
    restart: always
    image: "redis:alpine"
    ports:
      - "127.0.0.1:6389:6379"
    volumes:
      - redis-data:/data   
  
  uci-core-formsdb:
    restart: always
    image: postgres:9.6
    environment:
      POSTGRES_PASSWORD: ${FORMS_DB_PASSWORD}
      POSTGRES_USER: ${FORMS_DB_USERNAME}
      POSTGRES_DB: ${FORMS_DB_NAME}
    volumes:
      - db-data-formsdb:/var/lib/postgresql/data

  uci-core-graphql-formsdb:
    restart: always
    image: hasura/graphql-engine:latest
    ports:
      - "15002:8080"
    depends_on:
      - uci-core-formsdb
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgresql:yoursupersecret@formsdb:5432/formsdb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${FORMSDB_HASURA_GRAPHQL_ADMIN_SECRET}

# ODK      
  odk-aggregate-db:
    restart: always
    image: postgres:9.6-alpine
    environment:
      - POSTGRES_PASSWORD=${ODK_POSTGRES_PASSWORD}
      - POSTGRES_USER=${ODK_POSTGRES_USER}
      - POSTGRES_DB=${ODK_POSTGRES_DB}
    volumes:
      - ./odk-aggregate/odk/initdb:/docker-entrypoint-initdb.d
      - ./pgdata-odk:/var/lib/postgresql/data

  odk_wait_for_db:
    restart: always
    image: dadarek/wait-for-dependencies
    depends_on:
      - odk-aggregate-db
    command: odk-aggregate-db:5432

  odk-aggregate:
    restart: always
    depends_on:
      - odk_wait_for_db
    image: tomcat:alpine
    environment:
      - DB_USERNAME=${ODK_POSTGRES_USER}
      - DB_SCHEMA=public
      - DB_PASSWORD=${ODK_POSTGRES_PASSWORD}
      - DB_NAME=${ODK_POSTGRES_DB}
      - DB_PORT=5432
      - AGGREGATE_HOST=
      - DB_URL=jdbc:postgresql://odk-aggregate-db:5432/${ODK_POSTGRES_DB}?user=${ODK_POSTGRES_USER}&password=${ODK_POSTGRES_PASSWORD}
    ports:
      - 8080:8080
    volumes:
      - ./odk-aggregate/odk/webapps:/usr/local/tomcat/webapps

# Fusion Auth

  fusionauth-search:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
    environment:
      - cluster.name=fusionauth
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS}"
      - discovery.type=single-node
    # ulimits: # Don't work with Gitpod
    #   memlock:
    #     soft: -1
    #     hard: -1
    volumes:
      - fa-es-data:/usr/share/elasticsearch/data

  fusionauth:
    image: fusionauth/fusionauth-app:latest
    restart: always
    depends_on:
      - fusionauth-search
    environment:
      DATABASE_URL: jdbc:postgresql://fusionauth-db:${FUSIONAUTH_POSTGRES_PORT}/fusionauth
      DATABASE_ROOT_USERNAME: ${FUSIONAUTH_POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${FUSIONAUTH_POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${FUSIONAUTH_DATABASE_USER}
      DATABASE_PASSWORD: ${FUSIONAUTH_DATABASE_USERNAME}
      FUSIONAUTH_SEARCH_ENGINE_TYPE: elasticsearch
      FUSIONAUTH_SEARCH_SERVERS: http://fusionauth-search:9200
      FUSIONAUTH_URL: http://fusionauth:9011
      FUSIONAUTH_API_KEY: ${FUSIONAUTH_API_KEY}
      FUSIONAUTH_APP_KICKSTART_FILE: ${FUSIONAUTH_APP_KICKSTART_FILE}
      FUSIONAUTH_ADMIN_EMAIL: ${FUSIONAUTH_ADMIN_EMAIL}
      FUSIONAUTH_ADMIN_PASSWORD: ${FUSIONAUTH_ADMIN_PASSWORD}
    ports:
      - 9011:9011
    volumes:
      - fa-config:/usr/local/fusionauth/config
      - ./kickstart:/usr/local/fusionauth/kickstart

  fusionauth-db:
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_USER=${FUSIONAUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${FUSIONAUTH_POSTGRES_PASSWORD}
    volumes:
      - ./pgdata-fusionauth-db:/var/lib/postgresql/data
  
  vault-server:
    image: vault:1.10.3
    restart: always
    volumes:
      - ./vault/vault.json:/vault/config/vault.json
      - vault-data:/vault/file
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json

volumes:
  db-data-formsdb:
  db-data-messagedb:
  kafka-data:
  redis-data:
  license.json:
  fa-es-data:
  fa-config:
  pgdata-uci_postgres_db:
  vault-data: